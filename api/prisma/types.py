# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    partnershipId: Optional[_int]
    authoredCapsules: 'CapsuleCreateManyNestedWithoutRelationsInput'
    partnerRequests: 'PartnerRequestCreateManyNestedWithoutRelationsInput'
    partnership: 'PartnershipCreateNestedWithoutRelationsInput'
    openedCapsules: 'CapsuleCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str
    firstName: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    partnershipId: Optional[_int]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str
    firstName: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    firstName: _str
    authoredCapsules: 'CapsuleUpdateManyWithoutRelationsInput'
    partnerRequests: 'PartnerRequestUpdateManyWithoutRelationsInput'
    partnership: 'PartnershipUpdateOneWithoutRelationsInput'
    openedCapsules: 'CapsuleUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    firstName: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_firstName_OrderByInput = TypedDict(
    '_User_firstName_OrderByInput',
    {
        'firstName': 'SortOrder',
    },
    total=True
)

_User_partnershipId_OrderByInput = TypedDict(
    '_User_partnershipId_OrderByInput',
    {
        'partnershipId': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_firstName_OrderByInput',
    '_User_partnershipId_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromUser']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromUser']
    partnership: Union[bool, 'PartnershipArgsFromUser']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive1']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromUserRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive1']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive2']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromUserRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive2']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive3']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromUserRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive3']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive4']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromUserRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive4']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PartnerRequestIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    fromUser: Union[bool, 'UserArgsFromUserRecursive1']


class PartnerRequestIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    fromUser: Union[bool, 'UserArgsFromUserRecursive2']


class PartnerRequestIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    fromUser: Union[bool, 'UserArgsFromUserRecursive3']


class PartnerRequestIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    fromUser: Union[bool, 'UserArgsFromUserRecursive4']


class PartnerRequestIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PartnerRequestArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class PartnerRequestArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class PartnerRequestArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class PartnerRequestArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class PartnerRequestArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPartnerRequestArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class FindManyPartnerRequestArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class FindManyPartnerRequestArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class FindManyPartnerRequestArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class FindManyPartnerRequestArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    
    

class PartnershipIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive1']
    partners: Union[bool, 'FindManyUserArgsFromUserRecursive1']


class PartnershipIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive2']
    partners: Union[bool, 'FindManyUserArgsFromUserRecursive2']


class PartnershipIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive3']
    partners: Union[bool, 'FindManyUserArgsFromUserRecursive3']


class PartnershipIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromUserRecursive4']
    partners: Union[bool, 'FindManyUserArgsFromUserRecursive4']


class PartnershipIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PartnershipArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class PartnershipArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class PartnershipArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class PartnershipArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class PartnershipArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPartnershipArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class FindManyPartnershipArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class FindManyPartnershipArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class FindManyPartnershipArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class FindManyPartnershipArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    
    

class CapsuleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    openedBy: Union[bool, 'UserArgsFromUserRecursive1']
    author: Union[bool, 'UserArgsFromUserRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive1']


class CapsuleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    openedBy: Union[bool, 'UserArgsFromUserRecursive2']
    author: Union[bool, 'UserArgsFromUserRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive2']


class CapsuleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    openedBy: Union[bool, 'UserArgsFromUserRecursive3']
    author: Union[bool, 'UserArgsFromUserRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive3']


class CapsuleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    openedBy: Union[bool, 'UserArgsFromUserRecursive4']
    author: Union[bool, 'UserArgsFromUserRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromUserRecursive4']


class CapsuleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CapsuleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class CapsuleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class CapsuleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class CapsuleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class CapsuleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCapsuleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class FindManyCapsuleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class FindManyCapsuleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class FindManyCapsuleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class FindManyCapsuleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    authoredCapsules: 'CapsuleListRelationFilter'
    partnerRequests: 'PartnerRequestListRelationFilter'
    partnership: 'PartnershipRelationFilter'
    openedCapsules: 'CapsuleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    authoredCapsules: 'CapsuleListRelationFilter'
    partnerRequests: 'PartnerRequestListRelationFilter'
    partnership: 'PartnershipRelationFilter'
    openedCapsules: 'CapsuleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    authoredCapsules: 'CapsuleListRelationFilter'
    partnerRequests: 'PartnerRequestListRelationFilter'
    partnership: 'PartnershipRelationFilter'
    openedCapsules: 'CapsuleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    authoredCapsules: 'CapsuleListRelationFilter'
    partnerRequests: 'PartnerRequestListRelationFilter'
    partnership: 'PartnershipRelationFilter'
    openedCapsules: 'CapsuleListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    firstName: Union[_str, 'types.StringFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    authoredCapsules: 'CapsuleListRelationFilter'
    partnerRequests: 'PartnerRequestListRelationFilter'
    partnership: 'PartnershipRelationFilter'
    openedCapsules: 'CapsuleListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    firstName: Union[_str, 'types.StringWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    email: _str
    password: _str
    firstName: _str
    partnershipId: _int
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float
    partnershipId: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int
    partnershipId: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    email: _str
    password: _str
    firstName: _str
    partnershipId: _int


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    firstName: bool
    partnershipId: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    firstName: bool
    partnershipId: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool
    partnershipId: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'firstName': bool,
        'partnershipId': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'firstName': int,
        'partnershipId': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'firstName',
    'partnershipId',
    'authoredCapsules',
    'partnerRequests',
    'partnership',
    'openedCapsules',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'firstName',
    'partnershipId',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'authoredCapsules',
        'partnerRequests',
        'partnership',
        'openedCapsules',
    ]

# PartnerRequest types

class PartnerRequestOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PartnerRequest create method"""
    id: _int
    fromId: _int
    createdAt: datetime.datetime
    fromUser: 'UserCreateNestedWithoutRelationsInput'


class PartnerRequestCreateInput(PartnerRequestOptionalCreateInput):
    """Required arguments to the PartnerRequest create method"""
    toEmail: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PartnerRequestOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PartnerRequest create method, without relations"""
    id: _int
    fromId: _int
    createdAt: datetime.datetime


class PartnerRequestCreateWithoutRelationsInput(PartnerRequestOptionalCreateWithoutRelationsInput):
    """Required arguments to the PartnerRequest create method, without relations"""
    toEmail: _str


class PartnerRequestCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnerRequestCreateWithoutRelationsInput'
    connect: 'PartnerRequestWhereUniqueInput'


class PartnerRequestCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PartnerRequestCreateWithoutRelationsInput', List['PartnerRequestCreateWithoutRelationsInput']]
    connect: Union['PartnerRequestWhereUniqueInput', List['PartnerRequestWhereUniqueInput']]


_PartnerRequestWhereUnique_id_Input = TypedDict(
    '_PartnerRequestWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_PartnerRequestCompoundtoEmail_fromIdKeyInner = TypedDict(
    '_PartnerRequestCompoundtoEmail_fromIdKeyInner',
    {
        'toEmail': '_str',
        'fromId': '_int',
    },
    total=True
)

_PartnerRequestCompoundtoEmail_fromIdKey = TypedDict(
    '_PartnerRequestCompoundtoEmail_fromIdKey',
    {
        'toEmail_fromId': '_PartnerRequestCompoundtoEmail_fromIdKeyInner',
    },
    total=True
)

PartnerRequestWhereUniqueInput = Union[
    '_PartnerRequestWhereUnique_id_Input',
    '_PartnerRequestCompoundtoEmail_fromIdKey',
]


class PartnerRequestUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    toEmail: _str
    createdAt: datetime.datetime
    fromUser: 'UserUpdateOneWithoutRelationsInput'


class PartnerRequestUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    toEmail: _str
    createdAt: datetime.datetime


class PartnerRequestUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PartnerRequestCreateWithoutRelationsInput']
    connect: List['PartnerRequestWhereUniqueInput']
    set: List['PartnerRequestWhereUniqueInput']
    disconnect: List['PartnerRequestWhereUniqueInput']
    delete: List['PartnerRequestWhereUniqueInput']

    # TODO
    # update: List['PartnerRequestUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PartnerRequestUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PartnerRequestScalarWhereInput']
    # upsert: List['PartnerRequestUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PartnerRequestCreateOrConnectWithoutRelationsInput']


class PartnerRequestUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnerRequestCreateWithoutRelationsInput'
    connect: 'PartnerRequestWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PartnerRequestUpdateInput'
    # upsert: 'PartnerRequestUpsertWithoutRelationsInput'
    # connectOrCreate: 'PartnerRequestCreateOrConnectWithoutRelationsInput'


class PartnerRequestUpsertInput(TypedDict):
    create: 'PartnerRequestCreateInput'
    update: 'PartnerRequestUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PartnerRequest_id_OrderByInput = TypedDict(
    '_PartnerRequest_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PartnerRequest_toEmail_OrderByInput = TypedDict(
    '_PartnerRequest_toEmail_OrderByInput',
    {
        'toEmail': 'SortOrder',
    },
    total=True
)

_PartnerRequest_fromId_OrderByInput = TypedDict(
    '_PartnerRequest_fromId_OrderByInput',
    {
        'fromId': 'SortOrder',
    },
    total=True
)

_PartnerRequest_createdAt_OrderByInput = TypedDict(
    '_PartnerRequest_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

PartnerRequestOrderByInput = Union[
    '_PartnerRequest_id_OrderByInput',
    '_PartnerRequest_toEmail_OrderByInput',
    '_PartnerRequest_fromId_OrderByInput',
    '_PartnerRequest_createdAt_OrderByInput',
]



# recursive PartnerRequest types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PartnerRequestRelationFilter = TypedDict(
    'PartnerRequestRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PartnerRequestListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PartnerRequestInclude(TypedDict, total=False):
    """PartnerRequest relational arguments"""
    fromUser: Union[bool, 'UserArgsFromPartnerRequest']


    

class UserIncludeFromPartnerRequest(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive1']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnerRequestRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive1']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive1']


class UserIncludeFromPartnerRequestRecursive1(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive2']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnerRequestRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive2']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive2']


class UserIncludeFromPartnerRequestRecursive2(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive3']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnerRequestRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive3']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive3']


class UserIncludeFromPartnerRequestRecursive3(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive4']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnerRequestRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive4']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive4']


class UserIncludeFromPartnerRequestRecursive4(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""

    

class UserArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    
    

class FindManyUserArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PartnerRequestIncludeFromPartnerRequest(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    fromUser: Union[bool, 'UserArgsFromPartnerRequestRecursive1']


class PartnerRequestIncludeFromPartnerRequestRecursive1(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    fromUser: Union[bool, 'UserArgsFromPartnerRequestRecursive2']


class PartnerRequestIncludeFromPartnerRequestRecursive2(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    fromUser: Union[bool, 'UserArgsFromPartnerRequestRecursive3']


class PartnerRequestIncludeFromPartnerRequestRecursive3(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    fromUser: Union[bool, 'UserArgsFromPartnerRequestRecursive4']


class PartnerRequestIncludeFromPartnerRequestRecursive4(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""

    

class PartnerRequestArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class PartnerRequestArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class PartnerRequestArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class PartnerRequestArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class PartnerRequestArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    
    

class FindManyPartnerRequestArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class FindManyPartnerRequestArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class FindManyPartnerRequestArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class FindManyPartnerRequestArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class FindManyPartnerRequestArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    
    

class PartnershipIncludeFromPartnerRequest(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive1']
    partners: Union[bool, 'FindManyUserArgsFromPartnerRequestRecursive1']


class PartnershipIncludeFromPartnerRequestRecursive1(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive2']
    partners: Union[bool, 'FindManyUserArgsFromPartnerRequestRecursive2']


class PartnershipIncludeFromPartnerRequestRecursive2(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive3']
    partners: Union[bool, 'FindManyUserArgsFromPartnerRequestRecursive3']


class PartnershipIncludeFromPartnerRequestRecursive3(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnerRequestRecursive4']
    partners: Union[bool, 'FindManyUserArgsFromPartnerRequestRecursive4']


class PartnershipIncludeFromPartnerRequestRecursive4(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""

    

class PartnershipArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class PartnershipArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class PartnershipArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class PartnershipArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class PartnershipArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    
    

class FindManyPartnershipArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class FindManyPartnershipArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class FindManyPartnershipArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class FindManyPartnershipArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class FindManyPartnershipArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    
    

class CapsuleIncludeFromPartnerRequest(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    openedBy: Union[bool, 'UserArgsFromPartnerRequestRecursive1']
    author: Union[bool, 'UserArgsFromPartnerRequestRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive1']


class CapsuleIncludeFromPartnerRequestRecursive1(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    openedBy: Union[bool, 'UserArgsFromPartnerRequestRecursive2']
    author: Union[bool, 'UserArgsFromPartnerRequestRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive2']


class CapsuleIncludeFromPartnerRequestRecursive2(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    openedBy: Union[bool, 'UserArgsFromPartnerRequestRecursive3']
    author: Union[bool, 'UserArgsFromPartnerRequestRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive3']


class CapsuleIncludeFromPartnerRequestRecursive3(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""
    openedBy: Union[bool, 'UserArgsFromPartnerRequestRecursive4']
    author: Union[bool, 'UserArgsFromPartnerRequestRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromPartnerRequestRecursive4']


class CapsuleIncludeFromPartnerRequestRecursive4(TypedDict, total=False):
    """Relational arguments for PartnerRequest"""

    

class CapsuleArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class CapsuleArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class CapsuleArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class CapsuleArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class CapsuleArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    
    

class FindManyCapsuleArgsFromPartnerRequest(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class FindManyCapsuleArgsFromPartnerRequestRecursive1(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class FindManyCapsuleArgsFromPartnerRequestRecursive2(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class FindManyCapsuleArgsFromPartnerRequestRecursive3(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class FindManyCapsuleArgsFromPartnerRequestRecursive4(TypedDict, total=False):
    """Arguments for PartnerRequest"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    


FindManyPartnerRequestArgs = FindManyPartnerRequestArgsFromPartnerRequest
FindFirstPartnerRequestArgs = FindManyPartnerRequestArgsFromPartnerRequest


    

class PartnerRequestWhereInput(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    toEmail: Union[_str, 'types.StringFilter']
    fromId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerRequestWhereInputRecursive1', List['PartnerRequestWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PartnerRequestWhereInputRecursive1']
    OR: List['PartnerRequestWhereInputRecursive1']
    NOT: List['PartnerRequestWhereInputRecursive1']


class PartnerRequestWhereInputRecursive1(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    toEmail: Union[_str, 'types.StringFilter']
    fromId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerRequestWhereInputRecursive2', List['PartnerRequestWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PartnerRequestWhereInputRecursive2']
    OR: List['PartnerRequestWhereInputRecursive2']
    NOT: List['PartnerRequestWhereInputRecursive2']


class PartnerRequestWhereInputRecursive2(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    toEmail: Union[_str, 'types.StringFilter']
    fromId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerRequestWhereInputRecursive3', List['PartnerRequestWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PartnerRequestWhereInputRecursive3']
    OR: List['PartnerRequestWhereInputRecursive3']
    NOT: List['PartnerRequestWhereInputRecursive3']


class PartnerRequestWhereInputRecursive3(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    toEmail: Union[_str, 'types.StringFilter']
    fromId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromUser: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['PartnerRequestWhereInputRecursive4', List['PartnerRequestWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PartnerRequestWhereInputRecursive4']
    OR: List['PartnerRequestWhereInputRecursive4']
    NOT: List['PartnerRequestWhereInputRecursive4']


class PartnerRequestWhereInputRecursive4(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    toEmail: Union[_str, 'types.StringFilter']
    fromId: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromUser: 'UserRelationFilter'



# aggregate PartnerRequest types


    

class PartnerRequestScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    fromId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnerRequestScalarWhereWithAggregatesInputRecursive1']
    OR: List['PartnerRequestScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PartnerRequestScalarWhereWithAggregatesInputRecursive1']


class PartnerRequestScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    fromId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnerRequestScalarWhereWithAggregatesInputRecursive2']
    OR: List['PartnerRequestScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PartnerRequestScalarWhereWithAggregatesInputRecursive2']


class PartnerRequestScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    fromId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnerRequestScalarWhereWithAggregatesInputRecursive3']
    OR: List['PartnerRequestScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PartnerRequestScalarWhereWithAggregatesInputRecursive3']


class PartnerRequestScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    fromId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnerRequestScalarWhereWithAggregatesInputRecursive4']
    OR: List['PartnerRequestScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PartnerRequestScalarWhereWithAggregatesInputRecursive4']


class PartnerRequestScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """PartnerRequest arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    fromId: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PartnerRequestGroupByOutput(TypedDict, total=False):
    id: _int
    toEmail: _str
    fromId: _int
    createdAt: datetime.datetime
    _sum: 'PartnerRequestSumAggregateOutput'
    _avg: 'PartnerRequestAvgAggregateOutput'
    _min: 'PartnerRequestMinAggregateOutput'
    _max: 'PartnerRequestMaxAggregateOutput'
    _count: 'PartnerRequestCountAggregateOutput'


class PartnerRequestAvgAggregateOutput(TypedDict, total=False):
    """PartnerRequest output for aggregating averages"""
    id: float
    fromId: float


class PartnerRequestSumAggregateOutput(TypedDict, total=False):
    """PartnerRequest output for aggregating sums"""
    id: _int
    fromId: _int


class PartnerRequestScalarAggregateOutput(TypedDict, total=False):
    """PartnerRequest output including scalar fields"""
    id: _int
    toEmail: _str
    fromId: _int
    createdAt: datetime.datetime


PartnerRequestMinAggregateOutput = PartnerRequestScalarAggregateOutput
PartnerRequestMaxAggregateOutput = PartnerRequestScalarAggregateOutput


class PartnerRequestMaxAggregateInput(TypedDict, total=False):
    """PartnerRequest input for aggregating by max"""
    id: bool
    toEmail: bool
    fromId: bool
    createdAt: bool


class PartnerRequestMinAggregateInput(TypedDict, total=False):
    """PartnerRequest input for aggregating by min"""
    id: bool
    toEmail: bool
    fromId: bool
    createdAt: bool


class PartnerRequestNumberAggregateInput(TypedDict, total=False):
    """PartnerRequest input for aggregating numbers"""
    id: bool
    fromId: bool


PartnerRequestAvgAggregateInput = PartnerRequestNumberAggregateInput
PartnerRequestSumAggregateInput = PartnerRequestNumberAggregateInput


PartnerRequestCountAggregateInput = TypedDict(
    'PartnerRequestCountAggregateInput',
    {
        'id': bool,
        'toEmail': bool,
        'fromId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

PartnerRequestCountAggregateOutput = TypedDict(
    'PartnerRequestCountAggregateOutput',
    {
        'id': int,
        'toEmail': int,
        'fromId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


PartnerRequestKeys = Literal[
    'id',
    'toEmail',
    'fromId',
    'createdAt',
    'fromUser',
]
PartnerRequestScalarFieldKeys = Literal[
    'id',
    'toEmail',
    'fromId',
    'createdAt',
]
PartnerRequestScalarFieldKeysT = TypeVar('PartnerRequestScalarFieldKeysT', bound=PartnerRequestScalarFieldKeys)

PartnerRequestRelationalFieldKeys = Literal[
        'fromUser',
    ]

# Partnership types

class PartnershipOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Partnership create method"""
    id: _int
    createdAt: datetime.datetime
    capsules: 'CapsuleCreateManyNestedWithoutRelationsInput'
    partners: 'UserCreateManyNestedWithoutRelationsInput'


class PartnershipCreateInput(PartnershipOptionalCreateInput):
    """Required arguments to the Partnership create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PartnershipOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Partnership create method, without relations"""
    id: _int
    createdAt: datetime.datetime


class PartnershipCreateWithoutRelationsInput(PartnershipOptionalCreateWithoutRelationsInput):
    """Required arguments to the Partnership create method, without relations"""


class PartnershipCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnershipCreateWithoutRelationsInput'
    connect: 'PartnershipWhereUniqueInput'


class PartnershipCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PartnershipCreateWithoutRelationsInput', List['PartnershipCreateWithoutRelationsInput']]
    connect: Union['PartnershipWhereUniqueInput', List['PartnershipWhereUniqueInput']]


_PartnershipWhereUnique_id_Input = TypedDict(
    '_PartnershipWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

PartnershipWhereUniqueInput = _PartnershipWhereUnique_id_Input


class PartnershipUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    capsules: 'CapsuleUpdateManyWithoutRelationsInput'
    partners: 'UserUpdateManyWithoutRelationsInput'


class PartnershipUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class PartnershipUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PartnershipCreateWithoutRelationsInput']
    connect: List['PartnershipWhereUniqueInput']
    set: List['PartnershipWhereUniqueInput']
    disconnect: List['PartnershipWhereUniqueInput']
    delete: List['PartnershipWhereUniqueInput']

    # TODO
    # update: List['PartnershipUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PartnershipUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PartnershipScalarWhereInput']
    # upsert: List['PartnershipUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PartnershipCreateOrConnectWithoutRelationsInput']


class PartnershipUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PartnershipCreateWithoutRelationsInput'
    connect: 'PartnershipWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PartnershipUpdateInput'
    # upsert: 'PartnershipUpsertWithoutRelationsInput'
    # connectOrCreate: 'PartnershipCreateOrConnectWithoutRelationsInput'


class PartnershipUpsertInput(TypedDict):
    create: 'PartnershipCreateInput'
    update: 'PartnershipUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Partnership_id_OrderByInput = TypedDict(
    '_Partnership_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Partnership_createdAt_OrderByInput = TypedDict(
    '_Partnership_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

PartnershipOrderByInput = Union[
    '_Partnership_id_OrderByInput',
    '_Partnership_createdAt_OrderByInput',
]



# recursive Partnership types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PartnershipRelationFilter = TypedDict(
    'PartnershipRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PartnershipListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PartnershipInclude(TypedDict, total=False):
    """Partnership relational arguments"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnership']
    partners: Union[bool, 'FindManyUserArgsFromPartnership']


    

class UserIncludeFromPartnership(TypedDict, total=False):
    """Relational arguments for Partnership"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive1']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnershipRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive1']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive1']


class UserIncludeFromPartnershipRecursive1(TypedDict, total=False):
    """Relational arguments for Partnership"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive2']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnershipRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive2']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive2']


class UserIncludeFromPartnershipRecursive2(TypedDict, total=False):
    """Relational arguments for Partnership"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive3']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnershipRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive3']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive3']


class UserIncludeFromPartnershipRecursive3(TypedDict, total=False):
    """Relational arguments for Partnership"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive4']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromPartnershipRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive4']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive4']


class UserIncludeFromPartnershipRecursive4(TypedDict, total=False):
    """Relational arguments for Partnership"""

    

class UserArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    
    

class FindManyUserArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PartnerRequestIncludeFromPartnership(TypedDict, total=False):
    """Relational arguments for Partnership"""
    fromUser: Union[bool, 'UserArgsFromPartnershipRecursive1']


class PartnerRequestIncludeFromPartnershipRecursive1(TypedDict, total=False):
    """Relational arguments for Partnership"""
    fromUser: Union[bool, 'UserArgsFromPartnershipRecursive2']


class PartnerRequestIncludeFromPartnershipRecursive2(TypedDict, total=False):
    """Relational arguments for Partnership"""
    fromUser: Union[bool, 'UserArgsFromPartnershipRecursive3']


class PartnerRequestIncludeFromPartnershipRecursive3(TypedDict, total=False):
    """Relational arguments for Partnership"""
    fromUser: Union[bool, 'UserArgsFromPartnershipRecursive4']


class PartnerRequestIncludeFromPartnershipRecursive4(TypedDict, total=False):
    """Relational arguments for Partnership"""

    

class PartnerRequestArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class PartnerRequestArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class PartnerRequestArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class PartnerRequestArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class PartnerRequestArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    
    

class FindManyPartnerRequestArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class FindManyPartnerRequestArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class FindManyPartnerRequestArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class FindManyPartnerRequestArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class FindManyPartnerRequestArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    
    

class PartnershipIncludeFromPartnership(TypedDict, total=False):
    """Relational arguments for Partnership"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive1']
    partners: Union[bool, 'FindManyUserArgsFromPartnershipRecursive1']


class PartnershipIncludeFromPartnershipRecursive1(TypedDict, total=False):
    """Relational arguments for Partnership"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive2']
    partners: Union[bool, 'FindManyUserArgsFromPartnershipRecursive2']


class PartnershipIncludeFromPartnershipRecursive2(TypedDict, total=False):
    """Relational arguments for Partnership"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive3']
    partners: Union[bool, 'FindManyUserArgsFromPartnershipRecursive3']


class PartnershipIncludeFromPartnershipRecursive3(TypedDict, total=False):
    """Relational arguments for Partnership"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromPartnershipRecursive4']
    partners: Union[bool, 'FindManyUserArgsFromPartnershipRecursive4']


class PartnershipIncludeFromPartnershipRecursive4(TypedDict, total=False):
    """Relational arguments for Partnership"""

    

class PartnershipArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class PartnershipArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class PartnershipArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class PartnershipArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class PartnershipArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    
    

class FindManyPartnershipArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class FindManyPartnershipArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class FindManyPartnershipArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class FindManyPartnershipArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class FindManyPartnershipArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    
    

class CapsuleIncludeFromPartnership(TypedDict, total=False):
    """Relational arguments for Partnership"""
    openedBy: Union[bool, 'UserArgsFromPartnershipRecursive1']
    author: Union[bool, 'UserArgsFromPartnershipRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive1']


class CapsuleIncludeFromPartnershipRecursive1(TypedDict, total=False):
    """Relational arguments for Partnership"""
    openedBy: Union[bool, 'UserArgsFromPartnershipRecursive2']
    author: Union[bool, 'UserArgsFromPartnershipRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive2']


class CapsuleIncludeFromPartnershipRecursive2(TypedDict, total=False):
    """Relational arguments for Partnership"""
    openedBy: Union[bool, 'UserArgsFromPartnershipRecursive3']
    author: Union[bool, 'UserArgsFromPartnershipRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive3']


class CapsuleIncludeFromPartnershipRecursive3(TypedDict, total=False):
    """Relational arguments for Partnership"""
    openedBy: Union[bool, 'UserArgsFromPartnershipRecursive4']
    author: Union[bool, 'UserArgsFromPartnershipRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromPartnershipRecursive4']


class CapsuleIncludeFromPartnershipRecursive4(TypedDict, total=False):
    """Relational arguments for Partnership"""

    

class CapsuleArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class CapsuleArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class CapsuleArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class CapsuleArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class CapsuleArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    
    

class FindManyCapsuleArgsFromPartnership(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class FindManyCapsuleArgsFromPartnershipRecursive1(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class FindManyCapsuleArgsFromPartnershipRecursive2(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class FindManyCapsuleArgsFromPartnershipRecursive3(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class FindManyCapsuleArgsFromPartnershipRecursive4(TypedDict, total=False):
    """Arguments for Partnership"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    


FindManyPartnershipArgs = FindManyPartnershipArgsFromPartnership
FindFirstPartnershipArgs = FindManyPartnershipArgsFromPartnership


    

class PartnershipWhereInput(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    capsules: 'CapsuleListRelationFilter'
    partners: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnershipWhereInputRecursive1', List['PartnershipWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PartnershipWhereInputRecursive1']
    OR: List['PartnershipWhereInputRecursive1']
    NOT: List['PartnershipWhereInputRecursive1']


class PartnershipWhereInputRecursive1(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    capsules: 'CapsuleListRelationFilter'
    partners: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnershipWhereInputRecursive2', List['PartnershipWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PartnershipWhereInputRecursive2']
    OR: List['PartnershipWhereInputRecursive2']
    NOT: List['PartnershipWhereInputRecursive2']


class PartnershipWhereInputRecursive2(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    capsules: 'CapsuleListRelationFilter'
    partners: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnershipWhereInputRecursive3', List['PartnershipWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PartnershipWhereInputRecursive3']
    OR: List['PartnershipWhereInputRecursive3']
    NOT: List['PartnershipWhereInputRecursive3']


class PartnershipWhereInputRecursive3(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    capsules: 'CapsuleListRelationFilter'
    partners: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['PartnershipWhereInputRecursive4', List['PartnershipWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PartnershipWhereInputRecursive4']
    OR: List['PartnershipWhereInputRecursive4']
    NOT: List['PartnershipWhereInputRecursive4']


class PartnershipWhereInputRecursive4(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    capsules: 'CapsuleListRelationFilter'
    partners: 'UserListRelationFilter'



# aggregate Partnership types


    

class PartnershipScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnershipScalarWhereWithAggregatesInputRecursive1']
    OR: List['PartnershipScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PartnershipScalarWhereWithAggregatesInputRecursive1']


class PartnershipScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnershipScalarWhereWithAggregatesInputRecursive2']
    OR: List['PartnershipScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PartnershipScalarWhereWithAggregatesInputRecursive2']


class PartnershipScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnershipScalarWhereWithAggregatesInputRecursive3']
    OR: List['PartnershipScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PartnershipScalarWhereWithAggregatesInputRecursive3']


class PartnershipScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PartnershipScalarWhereWithAggregatesInputRecursive4']
    OR: List['PartnershipScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PartnershipScalarWhereWithAggregatesInputRecursive4']


class PartnershipScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Partnership arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PartnershipGroupByOutput(TypedDict, total=False):
    id: _int
    createdAt: datetime.datetime
    _sum: 'PartnershipSumAggregateOutput'
    _avg: 'PartnershipAvgAggregateOutput'
    _min: 'PartnershipMinAggregateOutput'
    _max: 'PartnershipMaxAggregateOutput'
    _count: 'PartnershipCountAggregateOutput'


class PartnershipAvgAggregateOutput(TypedDict, total=False):
    """Partnership output for aggregating averages"""
    id: float


class PartnershipSumAggregateOutput(TypedDict, total=False):
    """Partnership output for aggregating sums"""
    id: _int


class PartnershipScalarAggregateOutput(TypedDict, total=False):
    """Partnership output including scalar fields"""
    id: _int
    createdAt: datetime.datetime


PartnershipMinAggregateOutput = PartnershipScalarAggregateOutput
PartnershipMaxAggregateOutput = PartnershipScalarAggregateOutput


class PartnershipMaxAggregateInput(TypedDict, total=False):
    """Partnership input for aggregating by max"""
    id: bool
    createdAt: bool


class PartnershipMinAggregateInput(TypedDict, total=False):
    """Partnership input for aggregating by min"""
    id: bool
    createdAt: bool


class PartnershipNumberAggregateInput(TypedDict, total=False):
    """Partnership input for aggregating numbers"""
    id: bool


PartnershipAvgAggregateInput = PartnershipNumberAggregateInput
PartnershipSumAggregateInput = PartnershipNumberAggregateInput


PartnershipCountAggregateInput = TypedDict(
    'PartnershipCountAggregateInput',
    {
        'id': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

PartnershipCountAggregateOutput = TypedDict(
    'PartnershipCountAggregateOutput',
    {
        'id': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


PartnershipKeys = Literal[
    'id',
    'createdAt',
    'capsules',
    'partners',
]
PartnershipScalarFieldKeys = Literal[
    'id',
    'createdAt',
]
PartnershipScalarFieldKeysT = TypeVar('PartnershipScalarFieldKeysT', bound=PartnershipScalarFieldKeys)

PartnershipRelationalFieldKeys = Literal[
        'capsules',
        'partners',
    ]

# Capsule types

class CapsuleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Capsule create method"""
    id: _int
    createdAt: datetime.datetime
    openedBy: 'UserCreateNestedWithoutRelationsInput'
    openedById: Optional[_int]
    authorId: _int
    partnershipId: Optional[_int]
    lastOpened: Optional[datetime.datetime]
    nTimesOpened: _int
    author: 'UserCreateNestedWithoutRelationsInput'
    partnership: 'PartnershipCreateNestedWithoutRelationsInput'


class CapsuleCreateInput(CapsuleOptionalCreateInput):
    """Required arguments to the Capsule create method"""
    open: _bool
    color: _str
    message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CapsuleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Capsule create method, without relations"""
    id: _int
    createdAt: datetime.datetime
    openedById: Optional[_int]
    authorId: _int
    partnershipId: Optional[_int]
    lastOpened: Optional[datetime.datetime]
    nTimesOpened: _int


class CapsuleCreateWithoutRelationsInput(CapsuleOptionalCreateWithoutRelationsInput):
    """Required arguments to the Capsule create method, without relations"""
    open: _bool
    color: _str
    message: _str


class CapsuleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CapsuleCreateWithoutRelationsInput'
    connect: 'CapsuleWhereUniqueInput'


class CapsuleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CapsuleCreateWithoutRelationsInput', List['CapsuleCreateWithoutRelationsInput']]
    connect: Union['CapsuleWhereUniqueInput', List['CapsuleWhereUniqueInput']]


_CapsuleWhereUnique_id_Input = TypedDict(
    '_CapsuleWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CapsuleWhereUniqueInput = _CapsuleWhereUnique_id_Input


class CapsuleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    open: _bool
    openedBy: 'UserUpdateOneWithoutRelationsInput'
    color: _str
    message: _str
    lastOpened: Optional[datetime.datetime]
    nTimesOpened: Union[AtomicIntInput, _int]
    author: 'UserUpdateOneWithoutRelationsInput'
    partnership: 'PartnershipUpdateOneWithoutRelationsInput'


class CapsuleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    open: _bool
    color: _str
    message: _str
    lastOpened: Optional[datetime.datetime]
    nTimesOpened: Union[AtomicIntInput, _int]


class CapsuleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CapsuleCreateWithoutRelationsInput']
    connect: List['CapsuleWhereUniqueInput']
    set: List['CapsuleWhereUniqueInput']
    disconnect: List['CapsuleWhereUniqueInput']
    delete: List['CapsuleWhereUniqueInput']

    # TODO
    # update: List['CapsuleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CapsuleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CapsuleScalarWhereInput']
    # upsert: List['CapsuleUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CapsuleCreateOrConnectWithoutRelationsInput']


class CapsuleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CapsuleCreateWithoutRelationsInput'
    connect: 'CapsuleWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CapsuleUpdateInput'
    # upsert: 'CapsuleUpsertWithoutRelationsInput'
    # connectOrCreate: 'CapsuleCreateOrConnectWithoutRelationsInput'


class CapsuleUpsertInput(TypedDict):
    create: 'CapsuleCreateInput'
    update: 'CapsuleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Capsule_id_OrderByInput = TypedDict(
    '_Capsule_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Capsule_createdAt_OrderByInput = TypedDict(
    '_Capsule_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Capsule_open_OrderByInput = TypedDict(
    '_Capsule_open_OrderByInput',
    {
        'open': 'SortOrder',
    },
    total=True
)

_Capsule_openedById_OrderByInput = TypedDict(
    '_Capsule_openedById_OrderByInput',
    {
        'openedById': 'SortOrder',
    },
    total=True
)

_Capsule_color_OrderByInput = TypedDict(
    '_Capsule_color_OrderByInput',
    {
        'color': 'SortOrder',
    },
    total=True
)

_Capsule_message_OrderByInput = TypedDict(
    '_Capsule_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

_Capsule_authorId_OrderByInput = TypedDict(
    '_Capsule_authorId_OrderByInput',
    {
        'authorId': 'SortOrder',
    },
    total=True
)

_Capsule_partnershipId_OrderByInput = TypedDict(
    '_Capsule_partnershipId_OrderByInput',
    {
        'partnershipId': 'SortOrder',
    },
    total=True
)

_Capsule_lastOpened_OrderByInput = TypedDict(
    '_Capsule_lastOpened_OrderByInput',
    {
        'lastOpened': 'SortOrder',
    },
    total=True
)

_Capsule_nTimesOpened_OrderByInput = TypedDict(
    '_Capsule_nTimesOpened_OrderByInput',
    {
        'nTimesOpened': 'SortOrder',
    },
    total=True
)

CapsuleOrderByInput = Union[
    '_Capsule_id_OrderByInput',
    '_Capsule_createdAt_OrderByInput',
    '_Capsule_open_OrderByInput',
    '_Capsule_openedById_OrderByInput',
    '_Capsule_color_OrderByInput',
    '_Capsule_message_OrderByInput',
    '_Capsule_authorId_OrderByInput',
    '_Capsule_partnershipId_OrderByInput',
    '_Capsule_lastOpened_OrderByInput',
    '_Capsule_nTimesOpened_OrderByInput',
]



# recursive Capsule types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CapsuleRelationFilter = TypedDict(
    'CapsuleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CapsuleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CapsuleInclude(TypedDict, total=False):
    """Capsule relational arguments"""
    openedBy: Union[bool, 'UserArgsFromCapsule']
    author: Union[bool, 'UserArgsFromCapsule']
    partnership: Union[bool, 'PartnershipArgsFromCapsule']


    

class UserIncludeFromCapsule(TypedDict, total=False):
    """Relational arguments for Capsule"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive1']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromCapsuleRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive1']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive1']


class UserIncludeFromCapsuleRecursive1(TypedDict, total=False):
    """Relational arguments for Capsule"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive2']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromCapsuleRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive2']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive2']


class UserIncludeFromCapsuleRecursive2(TypedDict, total=False):
    """Relational arguments for Capsule"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive3']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromCapsuleRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive3']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive3']


class UserIncludeFromCapsuleRecursive3(TypedDict, total=False):
    """Relational arguments for Capsule"""
    authoredCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive4']
    partnerRequests: Union[bool, 'FindManyPartnerRequestArgsFromCapsuleRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive4']
    openedCapsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive4']


class UserIncludeFromCapsuleRecursive4(TypedDict, total=False):
    """Relational arguments for Capsule"""

    

class UserArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    
    

class FindManyUserArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PartnerRequestIncludeFromCapsule(TypedDict, total=False):
    """Relational arguments for Capsule"""
    fromUser: Union[bool, 'UserArgsFromCapsuleRecursive1']


class PartnerRequestIncludeFromCapsuleRecursive1(TypedDict, total=False):
    """Relational arguments for Capsule"""
    fromUser: Union[bool, 'UserArgsFromCapsuleRecursive2']


class PartnerRequestIncludeFromCapsuleRecursive2(TypedDict, total=False):
    """Relational arguments for Capsule"""
    fromUser: Union[bool, 'UserArgsFromCapsuleRecursive3']


class PartnerRequestIncludeFromCapsuleRecursive3(TypedDict, total=False):
    """Relational arguments for Capsule"""
    fromUser: Union[bool, 'UserArgsFromCapsuleRecursive4']


class PartnerRequestIncludeFromCapsuleRecursive4(TypedDict, total=False):
    """Relational arguments for Capsule"""

    

class PartnerRequestArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class PartnerRequestArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class PartnerRequestArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class PartnerRequestArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class PartnerRequestArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    
    

class FindManyPartnerRequestArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive1'


class FindManyPartnerRequestArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive2'


class FindManyPartnerRequestArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive3'


class FindManyPartnerRequestArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    include: 'PartnerRequestIncludeFromPartnerRequestRecursive4'


class FindManyPartnerRequestArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnerRequestOrderByInput', List['PartnerRequestOrderByInput']]
    where: 'PartnerRequestWhereInput'
    cursor: 'PartnerRequestWhereUniqueInput'
    distinct: List['PartnerRequestScalarFieldKeys']
    
    

class PartnershipIncludeFromCapsule(TypedDict, total=False):
    """Relational arguments for Capsule"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive1']
    partners: Union[bool, 'FindManyUserArgsFromCapsuleRecursive1']


class PartnershipIncludeFromCapsuleRecursive1(TypedDict, total=False):
    """Relational arguments for Capsule"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive2']
    partners: Union[bool, 'FindManyUserArgsFromCapsuleRecursive2']


class PartnershipIncludeFromCapsuleRecursive2(TypedDict, total=False):
    """Relational arguments for Capsule"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive3']
    partners: Union[bool, 'FindManyUserArgsFromCapsuleRecursive3']


class PartnershipIncludeFromCapsuleRecursive3(TypedDict, total=False):
    """Relational arguments for Capsule"""
    capsules: Union[bool, 'FindManyCapsuleArgsFromCapsuleRecursive4']
    partners: Union[bool, 'FindManyUserArgsFromCapsuleRecursive4']


class PartnershipIncludeFromCapsuleRecursive4(TypedDict, total=False):
    """Relational arguments for Capsule"""

    

class PartnershipArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class PartnershipArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class PartnershipArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class PartnershipArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class PartnershipArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    
    

class FindManyPartnershipArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive1'


class FindManyPartnershipArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive2'


class FindManyPartnershipArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive3'


class FindManyPartnershipArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    include: 'PartnershipIncludeFromPartnershipRecursive4'


class FindManyPartnershipArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['PartnershipOrderByInput', List['PartnershipOrderByInput']]
    where: 'PartnershipWhereInput'
    cursor: 'PartnershipWhereUniqueInput'
    distinct: List['PartnershipScalarFieldKeys']
    
    

class CapsuleIncludeFromCapsule(TypedDict, total=False):
    """Relational arguments for Capsule"""
    openedBy: Union[bool, 'UserArgsFromCapsuleRecursive1']
    author: Union[bool, 'UserArgsFromCapsuleRecursive1']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive1']


class CapsuleIncludeFromCapsuleRecursive1(TypedDict, total=False):
    """Relational arguments for Capsule"""
    openedBy: Union[bool, 'UserArgsFromCapsuleRecursive2']
    author: Union[bool, 'UserArgsFromCapsuleRecursive2']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive2']


class CapsuleIncludeFromCapsuleRecursive2(TypedDict, total=False):
    """Relational arguments for Capsule"""
    openedBy: Union[bool, 'UserArgsFromCapsuleRecursive3']
    author: Union[bool, 'UserArgsFromCapsuleRecursive3']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive3']


class CapsuleIncludeFromCapsuleRecursive3(TypedDict, total=False):
    """Relational arguments for Capsule"""
    openedBy: Union[bool, 'UserArgsFromCapsuleRecursive4']
    author: Union[bool, 'UserArgsFromCapsuleRecursive4']
    partnership: Union[bool, 'PartnershipArgsFromCapsuleRecursive4']


class CapsuleIncludeFromCapsuleRecursive4(TypedDict, total=False):
    """Relational arguments for Capsule"""

    

class CapsuleArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class CapsuleArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class CapsuleArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class CapsuleArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class CapsuleArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    
    

class FindManyCapsuleArgsFromCapsule(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive1'


class FindManyCapsuleArgsFromCapsuleRecursive1(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive2'


class FindManyCapsuleArgsFromCapsuleRecursive2(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive3'


class FindManyCapsuleArgsFromCapsuleRecursive3(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    include: 'CapsuleIncludeFromCapsuleRecursive4'


class FindManyCapsuleArgsFromCapsuleRecursive4(TypedDict, total=False):
    """Arguments for Capsule"""
    take: int
    skip: int
    order_by: Union['CapsuleOrderByInput', List['CapsuleOrderByInput']]
    where: 'CapsuleWhereInput'
    cursor: 'CapsuleWhereUniqueInput'
    distinct: List['CapsuleScalarFieldKeys']
    


FindManyCapsuleArgs = FindManyCapsuleArgsFromCapsule
FindFirstCapsuleArgs = FindManyCapsuleArgsFromCapsule


    

class CapsuleWhereInput(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    open: Union[_bool, 'types.BooleanFilter']
    openedBy: 'UserRelationFilter'
    openedById: Union[None, _int, 'types.IntFilter']
    color: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    lastOpened: Union[None, datetime.datetime, 'types.DateTimeFilter']
    nTimesOpened: Union[_int, 'types.IntFilter']
    author: 'UserRelationFilter'
    partnership: 'PartnershipRelationFilter'

    # should be noted that AND and NOT should be Union['CapsuleWhereInputRecursive1', List['CapsuleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CapsuleWhereInputRecursive1']
    OR: List['CapsuleWhereInputRecursive1']
    NOT: List['CapsuleWhereInputRecursive1']


class CapsuleWhereInputRecursive1(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    open: Union[_bool, 'types.BooleanFilter']
    openedBy: 'UserRelationFilter'
    openedById: Union[None, _int, 'types.IntFilter']
    color: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    lastOpened: Union[None, datetime.datetime, 'types.DateTimeFilter']
    nTimesOpened: Union[_int, 'types.IntFilter']
    author: 'UserRelationFilter'
    partnership: 'PartnershipRelationFilter'

    # should be noted that AND and NOT should be Union['CapsuleWhereInputRecursive2', List['CapsuleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CapsuleWhereInputRecursive2']
    OR: List['CapsuleWhereInputRecursive2']
    NOT: List['CapsuleWhereInputRecursive2']


class CapsuleWhereInputRecursive2(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    open: Union[_bool, 'types.BooleanFilter']
    openedBy: 'UserRelationFilter'
    openedById: Union[None, _int, 'types.IntFilter']
    color: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    lastOpened: Union[None, datetime.datetime, 'types.DateTimeFilter']
    nTimesOpened: Union[_int, 'types.IntFilter']
    author: 'UserRelationFilter'
    partnership: 'PartnershipRelationFilter'

    # should be noted that AND and NOT should be Union['CapsuleWhereInputRecursive3', List['CapsuleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CapsuleWhereInputRecursive3']
    OR: List['CapsuleWhereInputRecursive3']
    NOT: List['CapsuleWhereInputRecursive3']


class CapsuleWhereInputRecursive3(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    open: Union[_bool, 'types.BooleanFilter']
    openedBy: 'UserRelationFilter'
    openedById: Union[None, _int, 'types.IntFilter']
    color: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    lastOpened: Union[None, datetime.datetime, 'types.DateTimeFilter']
    nTimesOpened: Union[_int, 'types.IntFilter']
    author: 'UserRelationFilter'
    partnership: 'PartnershipRelationFilter'

    # should be noted that AND and NOT should be Union['CapsuleWhereInputRecursive4', List['CapsuleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CapsuleWhereInputRecursive4']
    OR: List['CapsuleWhereInputRecursive4']
    NOT: List['CapsuleWhereInputRecursive4']


class CapsuleWhereInputRecursive4(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    open: Union[_bool, 'types.BooleanFilter']
    openedBy: 'UserRelationFilter'
    openedById: Union[None, _int, 'types.IntFilter']
    color: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    authorId: Union[_int, 'types.IntFilter']
    partnershipId: Union[None, _int, 'types.IntFilter']
    lastOpened: Union[None, datetime.datetime, 'types.DateTimeFilter']
    nTimesOpened: Union[_int, 'types.IntFilter']
    author: 'UserRelationFilter'
    partnership: 'PartnershipRelationFilter'



# aggregate Capsule types


    

class CapsuleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    open: Union[_bool, 'types.BooleanWithAggregatesFilter']
    openedById: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']
    lastOpened: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nTimesOpened: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CapsuleScalarWhereWithAggregatesInputRecursive1']
    OR: List['CapsuleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CapsuleScalarWhereWithAggregatesInputRecursive1']


class CapsuleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    open: Union[_bool, 'types.BooleanWithAggregatesFilter']
    openedById: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']
    lastOpened: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nTimesOpened: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CapsuleScalarWhereWithAggregatesInputRecursive2']
    OR: List['CapsuleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CapsuleScalarWhereWithAggregatesInputRecursive2']


class CapsuleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    open: Union[_bool, 'types.BooleanWithAggregatesFilter']
    openedById: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']
    lastOpened: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nTimesOpened: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CapsuleScalarWhereWithAggregatesInputRecursive3']
    OR: List['CapsuleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CapsuleScalarWhereWithAggregatesInputRecursive3']


class CapsuleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    open: Union[_bool, 'types.BooleanWithAggregatesFilter']
    openedById: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']
    lastOpened: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nTimesOpened: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CapsuleScalarWhereWithAggregatesInputRecursive4']
    OR: List['CapsuleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CapsuleScalarWhereWithAggregatesInputRecursive4']


class CapsuleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Capsule arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    open: Union[_bool, 'types.BooleanWithAggregatesFilter']
    openedById: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    authorId: Union[_int, 'types.IntWithAggregatesFilter']
    partnershipId: Union[_int, 'types.IntWithAggregatesFilter']
    lastOpened: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nTimesOpened: Union[_int, 'types.IntWithAggregatesFilter']



class CapsuleGroupByOutput(TypedDict, total=False):
    id: _int
    createdAt: datetime.datetime
    open: _bool
    openedById: _int
    color: _str
    message: _str
    authorId: _int
    partnershipId: _int
    lastOpened: datetime.datetime
    nTimesOpened: _int
    _sum: 'CapsuleSumAggregateOutput'
    _avg: 'CapsuleAvgAggregateOutput'
    _min: 'CapsuleMinAggregateOutput'
    _max: 'CapsuleMaxAggregateOutput'
    _count: 'CapsuleCountAggregateOutput'


class CapsuleAvgAggregateOutput(TypedDict, total=False):
    """Capsule output for aggregating averages"""
    id: float
    openedById: float
    authorId: float
    partnershipId: float
    nTimesOpened: float


class CapsuleSumAggregateOutput(TypedDict, total=False):
    """Capsule output for aggregating sums"""
    id: _int
    openedById: _int
    authorId: _int
    partnershipId: _int
    nTimesOpened: _int


class CapsuleScalarAggregateOutput(TypedDict, total=False):
    """Capsule output including scalar fields"""
    id: _int
    createdAt: datetime.datetime
    open: _bool
    openedById: _int
    color: _str
    message: _str
    authorId: _int
    partnershipId: _int
    lastOpened: datetime.datetime
    nTimesOpened: _int


CapsuleMinAggregateOutput = CapsuleScalarAggregateOutput
CapsuleMaxAggregateOutput = CapsuleScalarAggregateOutput


class CapsuleMaxAggregateInput(TypedDict, total=False):
    """Capsule input for aggregating by max"""
    id: bool
    createdAt: bool
    open: bool
    openedById: bool
    color: bool
    message: bool
    authorId: bool
    partnershipId: bool
    lastOpened: bool
    nTimesOpened: bool


class CapsuleMinAggregateInput(TypedDict, total=False):
    """Capsule input for aggregating by min"""
    id: bool
    createdAt: bool
    open: bool
    openedById: bool
    color: bool
    message: bool
    authorId: bool
    partnershipId: bool
    lastOpened: bool
    nTimesOpened: bool


class CapsuleNumberAggregateInput(TypedDict, total=False):
    """Capsule input for aggregating numbers"""
    id: bool
    openedById: bool
    authorId: bool
    partnershipId: bool
    nTimesOpened: bool


CapsuleAvgAggregateInput = CapsuleNumberAggregateInput
CapsuleSumAggregateInput = CapsuleNumberAggregateInput


CapsuleCountAggregateInput = TypedDict(
    'CapsuleCountAggregateInput',
    {
        'id': bool,
        'createdAt': bool,
        'open': bool,
        'openedById': bool,
        'color': bool,
        'message': bool,
        'authorId': bool,
        'partnershipId': bool,
        'lastOpened': bool,
        'nTimesOpened': bool,
        '_all': bool,
    },
    total=False,
)

CapsuleCountAggregateOutput = TypedDict(
    'CapsuleCountAggregateOutput',
    {
        'id': int,
        'createdAt': int,
        'open': int,
        'openedById': int,
        'color': int,
        'message': int,
        'authorId': int,
        'partnershipId': int,
        'lastOpened': int,
        'nTimesOpened': int,
        '_all': int,
    },
    total=False,
)


CapsuleKeys = Literal[
    'id',
    'createdAt',
    'open',
    'openedBy',
    'openedById',
    'color',
    'message',
    'authorId',
    'partnershipId',
    'lastOpened',
    'nTimesOpened',
    'author',
    'partnership',
]
CapsuleScalarFieldKeys = Literal[
    'id',
    'createdAt',
    'open',
    'openedById',
    'color',
    'message',
    'authorId',
    'partnershipId',
    'lastOpened',
    'nTimesOpened',
]
CapsuleScalarFieldKeysT = TypeVar('CapsuleScalarFieldKeysT', bound=CapsuleScalarFieldKeys)

CapsuleRelationalFieldKeys = Literal[
        'openedBy',
        'author',
        'partnership',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields