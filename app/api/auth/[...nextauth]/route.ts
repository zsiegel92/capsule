import NextAuth, { type NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import prisma from "@/lib/prisma";
import { compare } from "bcrypt";



import type {
    JWT,
    JWTDecodeParams,
    JWTEncodeParams,
    JWTOptions,
} from 'next-auth/jwt';
var jwt = require('jsonwebtoken');

export const authOptions: NextAuthOptions = {
    providers: [
        CredentialsProvider({
            credentials: {
                email: { label: 'Email', type: 'email' },
                password: { label: 'Password', type: 'password' },
            },
            // @ts-ignore
            async authorize(credentials) {
                const { email, password } = credentials ?? {};
                if (!email || !password) {
                    throw new Error('Missing username or password');
                }
                const user = await prisma.user.findUnique({
                    where: {
                        email,
                    },
                });
                // if user doesn't exist or password doesn't match
                if (!user || !(await compare(password, user.password))) {
                    throw new Error('Invalid username or password');
                }
                return user;
            },
        }),
    ],
    jwt: {
        async encode(params: JWTEncodeParams) {
            console.log('ENCODE');
            console.log(JSON.stringify(params));
            const { token = {}, secret, maxAge = 3600000, salt = '' } = params;
            const jwtClaims = {
                // sub: token?.id?.toString(),
                // user: {
                //     name: token.name,
                //     email: token.email,
                // },
                user: token,
                iat: Date.now() / 1000,
                exp: Math.floor(Date.now() / 1000) + maxAge,
            };
            const encodedToken = jwt.sign(jwtClaims, secret, {
                algorithm: 'HS256',
            });
            console.log(encodedToken);
            return encodedToken;
        },
        async decode(params: JWTDecodeParams) {
            console.log('DECODE');
            console.log(JSON.stringify(params));
            const { token, secret, salt = '' } = params;
            const decodedToken = jwt.verify(token, secret, {
                algorithms: ['HS256'],
            });
            console.log('--DECODED--');
            console.log(decodedToken);
            return decodedToken;
            // return decodedToken;
        },
    },
    debug: true,
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };


// Generated by copilot, doesn't work. 'JWEInvalid: Invalid Compact JWE\n' +
// jwt: {
//   async encode({ secret, token, maxAge }) {
//       const encodedToken = await jwt.sign(token, secret, {
//           algorithm: 'HS512',
//           expiresIn: maxAge,
//       });
//       return encodedToken;
//   },
//   async decode({ secret, token }) {
//       const decodedToken = await jwt.verify(token, secret);
//       return decodedToken;
//   },
// },