generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// generator py {
//   provider             = "prisma-client-py"
//   recursive_type_depth = 5
// }

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  firstName        String
  partnershipId    Int?
  authoredCapsules Capsule[]        @relation("AuthoredCapsules")
  partnerRequests  PartnerRequest[] @relation("PartnerRequest")
  partnership      Partnership?     @relation("Partnership", fields: [partnershipId], references: [id])
  openedCapsules   Capsule[]        @relation("OpenedCapsules")
}

model PartnerRequest {
  id        Int      @id @default(autoincrement())
  toEmail   String
  fromId    Int
  createdAt DateTime @default(now())
  from      User     @relation("PartnerRequest", fields: [fromId], references: [id])

  @@unique([toEmail, fromId])
}

model Partnership {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  capsules  Capsule[] @relation("CapsulePartnership")
  partners  User[]    @relation("Partnership")
}

model Capsule {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  open          Boolean
  openedBy      User?      @relation("OpenedCapsules", fields: [openedById], references: [id])
  openedById    Int?
  color         String
  message       String
  authorId      Int
  partnershipId Int?
  lastOpened    DateTime?
  nTimesOpened  Int         @default(0)
  author        User        @relation("AuthoredCapsules", fields: [authorId], references: [id])
  partnership   Partnership? @relation("CapsulePartnership", fields: [partnershipId], references: [id])
}
